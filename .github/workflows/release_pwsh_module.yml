name: Release PowerShell Module

on:
  workflow_dispatch:
    inputs:
      skip-publish:
        description: "Skip publishing"
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
    paths:
      - "powershell/Mondoo.Installer/Mondoo.Installer.psm1"
      - "powershell/Mondoo.Installer/Mondoo.Installer.psd1"

jobs:
  publish:
    runs-on: windows-2025
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |-
            powershell/Mondoo.Installer/Mondoo.Installer.psm1
            powershell/Mondoo.Installer/Mondoo.Installer.psd1

      - name: Validation Module Manifest and Signatures
        shell: pwsh
        run: |
          $manifestPath = ".\powershell\Mondoo.Installer\Mondoo.Installer.psd1"
          $moduleFile   = ".\powershell\Mondoo.Installer\Mondoo.Installer.psm1"

          # Check existence
          if (-not (Test-Path $manifestPath)) {
            Write-Error "‚ùå Manifest not found: $manifestPath"
            exit 1
          }
          if (-not (Test-Path $moduleFile)) {
            Write-Error "‚ùå Module file not found: $moduleFile"
            exit 1
          }

          # Validate manifest
          try {
            Write-Host "üß™ Testing module manifest..."
            Test-ModuleManifest -Path $manifestPath -ErrorAction Stop | Out-Null
            Write-Host "‚úÖ Manifest is valid."
          } catch {
            Write-Error "‚ùå Test-ModuleManifest failed: $($_.Exception.Message)"
            exit 1
          }

          # Validate .psm1 signature
          Write-Host "üîí Checking signature on module file..."
          $sig = Get-AuthenticodeSignature $moduleFile
          if ($sig.Status -ne 'Valid') {
            Write-Error "‚ùå Invalid signature on ${moduleFile}: $($sig.Status)"
            exit 1
          }

          Write-Host "‚úÖ Signature is valid on $moduleFile"
          Write-Host "`nüéâ All checks passed."

      - name: Check if version already exists
        id: version-check
        shell: pwsh
        run: |
          $manifestPath = ".\powershell\Mondoo.Installer\Mondoo.Installer.psd1"
          $manifest = Test-ModuleManifest -Path $manifestPath
          $localVersion = $manifest.Version.ToString()

          try {
            $galleryModule = Find-Module -Name $manifest.Name -Repository PSGallery -ErrorAction Stop
            if ($galleryModule.Version -eq $localVersion) {
              Write-Host "‚ö†Ô∏è Version $localVersion already published to PSGallery."
              Write-Host "skip=true" >> $env:GITHUB_OUTPUT
              exit 0
            }
          } catch {
            Write-Host "‚ÑπÔ∏è Module not found in gallery, publishing new version."
          }
          Write-Host "skip=false" >> $env:GITHUB_OUTPUT

      - name: Publish PowerShell Module
        if: ${{ steps.version-check.outputs.skip == 'false' && inputs.skip-publish == false }}
        shell: pwsh
        env:
          NUGETAPIKEY: ${{ secrets.NUGETAPIKEY }}
        run: |
          $modulePath = ".\powershell\Mondoo.Installer"

          # Ensure required files exist
          if (-not (Test-Path "$modulePath\Mondoo.Installer.psd1")) {
            Write-Error "‚ùå Module manifest not found."
            exit 1
          }

          Write-Host "üì¶ Publishing module to PowerShell Gallery..."
          Publish-Module -Path $modulePath -NuGetApiKey $env:NUGETAPIKEY -ErrorAction Stop
          Write-Host "‚úÖ Module published successfully."
